<?php namespace Stylos\Stblog;

use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Facades;
use Illuminate\Support\Facades\Config;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\MessageBag;

class StblogController extends Controller {

	public function __construct(){
        $this->layout = View::make('stblog::layout');
        }

        public function showList()
        {
           $this->layout->content = View::make('stblog::list');
        }
	
        //login functyions	

        public function showLogin()
	{
	// show the form
	return View::make('stblog::login');
	}

	public function doLogin()
	{
		// validate the info, create rules for the inputs
		$rules = array(
			'email'    => 'required|email', // make sure the email is an actual email
			'password' => 'required|alphaNum|min:3' // password can only be alphanumeric and has to be greater than 3 characters
		);

		// run the validation rules on the inputs from the form
		$validator = Validator::make(Input::all(), $rules);

		// if the validator fails, redirect back to the form
		if ($validator->fails()) {
			return Redirect::to('stblog::login')
				->withErrors($validator) // send back all errors to the login form
				->withInput(Input::except('password')); // send back the input (not the password) so that we can repopulate the form
		} else {

			// create our user data for the authentication
			$userdata = array(
				'email' 	=> Input::get('email'),
				'password' 	=> Input::get('password')
			);

			// attempt to do the login
			if (Auth::attempt($userdata)) {

				// validation successful!
				// redirect them to the secure section or whatever
				// return Redirect::to('secure');
				// for now we'll just echo success (even though echoing in a controller is bad)
				return Redirect::to('/blog');

			} else {	 	

				// validation not successful, send back to form	
				return Redirect::to('login');

			}

		}
	}

	//end login functions

	//logout function
	public function doLogout()
	{
		Auth::logout(); // log the user out of our application
		return Redirect::to('/login'); // redirect the user to the login screen
	}
	//logout function




        public function showPost($link)
        {
            $post = Post::where('link', '=', $link)->firstOrFail();
            $this->layout->content = View::make('stblog::post', $post);
        }
	public function newPost()
       {
       // $this->layout->title = 'New Post';
        //$this->layout->main = View::make('stblog::newpost');
	return View::make('stblog::newpost');
        }
	public function insert()
       {
	return View::make('stblog::insert');
        }
	public function addPost()  //функция добваления поста
	{
	$data = Input::all();   //получаем данные из формы newpost.blade.php и заносим данные в переменную, которая обрабатывается в модели Post.php
	$post = Post::add($data);  
	
	if ($post instanceof Exception)
		{
		return "error";
		}
	return Redirect::to('/blog/');
	}
    }
